{
	"info": {
		"_postman_id": "8fe6c67d-1664-4e1f-9be1-40b7fddf8165",
		"name": "Introduction to Microservices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3162383"
	},
	"item": [
		{
			"name": "song service",
			"item": [
				{
					"name": "delete song by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema includes the 'ids' array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.ids).to.exist.and.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Ids array contains non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.ids).to.be.an('array');\r",
									"    responseData.ids.forEach(function(id) {\r",
									"        pm.expect(id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Value should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{song-service}}?id=11,12",
							"host": [
								"{{song-service}}"
							],
							"query": [
								{
									"key": "id",
									"value": "11,12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get song by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('artist');\r",
									"    pm.expect(responseData).to.have.property('album');\r",
									"    pm.expect(responseData).to.have.property('duration');\r",
									"    pm.expect(responseData).to.have.property('year');\r",
									"});\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"ID should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Duration is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.duration).to.match(/^\\d+:\\d+$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{song-service}}/7",
							"host": [
								"{{song-service}}"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "create song by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"11\",\r\n    \"name\": \"name\",\r\n    \"artist\": \"ll\",\r\n    \"album\": \"alb\",\r\n    \"duration\": \"02:45\",\r\n    \"year\": \"2025\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{song-service}}",
							"host": [
								"{{song-service}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "resource service",
			"item": [
				{
					"name": "create resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/GENO/Desktop/mp3/valid-sample-with-required-tags.mp3"
								}
							]
						},
						"url": {
							"raw": "{{resource-service}}",
							"host": [
								"{{resource-service}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exists in the response schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{resource-service}}/9",
							"host": [
								"{{resource-service}}"
							],
							"path": [
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete resource by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an id property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('ids');\r",
									"    pm.expect(responseData.ids).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response array has the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.ids).to.be.an('array');\r",
									"    pm.expect(responseData.ids).to.have.lengthOf(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{resource-service}}?id=9,10",
							"host": [
								"{{resource-service}}"
							],
							"query": [
								{
									"key": "id",
									"value": "9,10"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "resource-service",
			"value": "http://localhost:8081/resources",
			"type": "string"
		},
		{
			"key": "song-service",
			"value": "http://localhost:8082/songs",
			"type": "string"
		}
	]
}